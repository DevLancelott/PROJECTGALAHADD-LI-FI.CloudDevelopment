#!/bin/bash

# Enable WayVNC Service
# Configures authentication, security, and enables the service

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
WAYVNC_DIR="/home/pi/wayvnc"
BUILD_DIR="$WAYVNC_DIR/build"
CONFIG_DIR="/home/pi/.config/wayvnc"
SERVICE_NAME="wayvnc.service"
SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME"

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Check if wayvnc is built
check_wayvnc_build() {
    log "Checking WayVNC build..."
    
    if [ ! -f "$BUILD_DIR/wayvnc" ]; then
        error "WayVNC binary not found: $BUILD_DIR/wayvnc"
        error "Please run wayvnc_setup.sh first"
        exit 1
    fi
    
    log "WayVNC binary found"
}

# Create configuration directory
create_config_dir() {
    log "Creating configuration directory..."
    mkdir -p "$CONFIG_DIR"
    chown pi:pi "$CONFIG_DIR"
    chmod 700 "$CONFIG_DIR"
    log "Configuration directory created: $CONFIG_DIR"
}

# Setup authentication
setup_authentication() {
    log "Setting up authentication..."
    
    PASSWORD_FILE="$CONFIG_DIR/password"
    
    # Create password file
    if [ ! -f "$PASSWORD_FILE" ]; then
        echo "Setting up VNC password..."
        echo "Enter password for VNC access:"
        read -s password
        echo ""
        echo "Confirm password:"
        read -s password_confirm
        echo ""
        
        if [ "$password" != "$password_confirm" ]; then
            error "Passwords do not match"
            exit 1
        fi
        
        # Hash password and save
        echo "$password" | openssl passwd -1 -stdin > "$PASSWORD_FILE"
        chown pi:pi "$PASSWORD_FILE"
        chmod 600 "$PASSWORD_FILE"
        
        log "Password file created: $PASSWORD_FILE"
    else
        log "Password file already exists: $PASSWORD_FILE"
    fi
}

# Create WayVNC configuration
create_config() {
    log "Creating WayVNC configuration..."
    
    CONFIG_FILE="$CONFIG_DIR/config"
    
    # Backup existing config
    if [ -f "$CONFIG_FILE" ]; then
        cp "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Create new config
    cat > "$CONFIG_FILE" << EOF
# WayVNC Configuration
# Generated by enable_wayvnc.sh

# Network settings
address=0.0.0.0
port=5900

# Authentication
enable_auth=true
username=pi
password_file=$CONFIG_DIR/password

# Performance settings
max_fps=30
quality=80
compression_level=6

# Security settings
enable_tls=false
enable_rsa_encryption=false

# Logging
log_level=info
log_file=$CONFIG_DIR/wayvnc.log

# Display settings
output_name=wayland-0
enable_cursor=true
enable_clipboard=true

# Advanced settings
max_connections=5
idle_timeout=300
EOF
    
    chown pi:pi "$CONFIG_FILE"
    chmod 600 "$CONFIG_FILE"
    
    log "Configuration created: $CONFIG_FILE"
}

# Update systemd service
update_systemd_service() {
    log "Updating systemd service..."
    
    # Create enhanced service file
    cat > "$SERVICE_FILE" << EOF
[Unit]
Description=WayVNC Server
After=multi-user.target
Wants=network-online.target
After=network-online.target
Requires=graphical-session.target

[Service]
Type=simple
User=pi
Group=pi
WorkingDirectory=$WAYVNC_DIR
Environment=XDG_RUNTIME_DIR=/run/user/1000
Environment=WAYLAND_DISPLAY=wayland-0
Environment=DISPLAY=:0
ExecStart=$BUILD_DIR/wayvnc --config=$CONFIG_DIR/config
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=wayvnc

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$CONFIG_DIR $WAYVNC_DIR
ProtectKernelTunables=true
ProtectKernelModules=true
ProtectControlGroups=true
RestrictRealtime=true
RestrictSUIDSGID=true
LockPersonality=true
MemoryDenyWriteExecute=true

[Install]
WantedBy=multi-user.target
EOF
    
    # Reload systemd
    systemctl daemon-reload
    
    log "Systemd service updated"
}

# Enable and start service
enable_service() {
    log "Enabling WayVNC service..."
    
    # Enable service
    systemctl enable "$SERVICE_NAME"
    
    # Start service
    systemctl start "$SERVICE_NAME"
    
    # Check status
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        log "WayVNC service started successfully"
    else
        error "Failed to start WayVNC service"
        systemctl status "$SERVICE_NAME"
        exit 1
    fi
}

# Setup firewall
setup_firewall() {
    log "Setting up firewall rules..."
    
    # Allow VNC port
    ufw allow 5900/tcp comment "WayVNC"
    
    # Allow SSH (if not already allowed)
    ufw allow ssh
    
    # Enable firewall if not enabled
    if ! ufw status | grep -q "Status: active"; then
        log "Enabling firewall..."
        ufw --force enable
    fi
    
    log "Firewall rules configured"
}

# Create connection scripts
create_connection_scripts() {
    log "Creating connection scripts..."
    
    # SSH tunnel script
    cat > "$CONFIG_DIR/ssh_tunnel.sh" << 'EOF'
#!/bin/bash
# SSH tunnel for WayVNC access

PI_HOST="${1:-raspberrypi.local}"
PI_USER="${2:-pi}"
LOCAL_PORT="${3:-5900}"
REMOTE_PORT="${4:-5900}"

echo "Creating SSH tunnel to $PI_HOST..."
echo "Local port: $LOCAL_PORT"
echo "Remote port: $REMOTE_PORT"
echo ""
echo "Connect your VNC client to: localhost:$LOCAL_PORT"
echo "Press Ctrl+C to stop tunnel"

ssh -L "$LOCAL_PORT:localhost:$REMOTE_PORT" "$PI_USER@$PI_HOST"
EOF
    
    # VNC client connection script
    cat > "$CONFIG_DIR/connect_vnc.sh" << 'EOF'
#!/bin/bash
# Connect to WayVNC server

PI_HOST="${1:-raspberrypi.local}"
PI_USER="${2:-pi}"
PORT="${3:-5900}"

echo "Connecting to WayVNC server..."
echo "Host: $PI_HOST"
echo "Port: $PORT"
echo ""

# Try different VNC clients
if command -v vinagre &> /dev/null; then
    echo "Using Vinagre VNC client..."
    vinagre "$PI_HOST:$PORT"
elif command -v vncviewer &> /dev/null; then
    echo "Using VNC Viewer..."
    vncviewer "$PI_HOST:$PORT"
elif command -v remmina &> /dev/null; then
    echo "Using Remmina..."
    remmina -c "vnc://$PI_HOST:$PORT"
else
    echo "No VNC client found. Install one of:"
    echo "- vinagre (GNOME)"
    echo "- tigervnc-viewer"
    echo "- remmina"
fi
EOF
    
    # Service management script
    cat > "$CONFIG_DIR/manage_service.sh" << 'EOF'
#!/bin/bash
# Manage WayVNC service

SERVICE_NAME="wayvnc.service"

case "$1" in
    "start")
        echo "Starting WayVNC service..."
        sudo systemctl start "$SERVICE_NAME"
        ;;
    "stop")
        echo "Stopping WayVNC service..."
        sudo systemctl stop "$SERVICE_NAME"
        ;;
    "restart")
        echo "Restarting WayVNC service..."
        sudo systemctl restart "$SERVICE_NAME"
        ;;
    "status")
        echo "WayVNC service status:"
        sudo systemctl status "$SERVICE_NAME"
        ;;
    "logs")
        echo "WayVNC service logs:"
        sudo journalctl -u "$SERVICE_NAME" -f
        ;;
    "enable")
        echo "Enabling WayVNC service..."
        sudo systemctl enable "$SERVICE_NAME"
        ;;
    "disable")
        echo "Disabling WayVNC service..."
        sudo systemctl disable "$SERVICE_NAME"
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|logs|enable|disable}"
        exit 1
        ;;
esac
EOF
    
    chmod +x "$CONFIG_DIR"/*.sh
    chown pi:pi "$CONFIG_DIR"/*.sh
    
    log "Connection scripts created"
}

# Test connection
test_connection() {
    log "Testing WayVNC connection..."
    
    # Wait a moment for service to start
    sleep 3
    
    # Check if service is running
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        log "WayVNC service is running"
        
        # Check if port is listening
        if netstat -tlnp 2>/dev/null | grep -q ":5900 "; then
            log "WayVNC is listening on port 5900"
        else
            warning "WayVNC may not be listening on port 5900"
        fi
        
        # Show service status
        echo ""
        echo "Service Status:"
        echo "==============="
        systemctl status "$SERVICE_NAME" --no-pager -l
        echo ""
        
    else
        error "WayVNC service is not running"
        systemctl status "$SERVICE_NAME"
        exit 1
    fi
}

# Create status script
create_status_script() {
    log "Creating status script..."
    
    cat > "$CONFIG_DIR/status.sh" << 'EOF'
#!/bin/bash
# WayVNC status and diagnostics

echo "WayVNC Status Report"
echo "==================="
echo ""

# Service status
echo "Service Status:"
if systemctl is-active --quiet wayvnc.service; then
    echo "✓ WayVNC service is running"
else
    echo "✗ WayVNC service is not running"
fi

# Port status
echo ""
echo "Port Status:"
if netstat -tlnp 2>/dev/null | grep -q ":5900 "; then
    echo "✓ Port 5900 is listening"
else
    echo "✗ Port 5900 is not listening"
fi

# Configuration
echo ""
echo "Configuration:"
CONFIG_FILE="$HOME/.config/wayvnc/config"
if [ -f "$CONFIG_FILE" ]; then
    echo "✓ Configuration file exists"
    echo "  Location: $CONFIG_FILE"
else
    echo "✗ Configuration file not found"
fi

# Authentication
echo ""
echo "Authentication:"
PASSWORD_FILE="$HOME/.config/wayvnc/password"
if [ -f "$PASSWORD_FILE" ]; then
    echo "✓ Password file exists"
else
    echo "✗ Password file not found"
fi

# Logs
echo ""
echo "Recent Logs:"
journalctl -u wayvnc.service --no-pager -n 10

# Network info
echo ""
echo "Network Information:"
echo "Hostname: $(hostname)"
echo "IP Address: $(hostname -I | awk '{print $1}')"
echo "VNC URL: vnc://$(hostname -I | awk '{print $1}'):5900"
EOF
    
    chmod +x "$CONFIG_DIR/status.sh"
    chown pi:pi "$CONFIG_DIR/status.sh"
    
    log "Status script created: $CONFIG_DIR/status.sh"
}

# Main function
main() {
    log "Starting WayVNC service enablement..."
    
    check_root
    check_wayvnc_build
    create_config_dir
    setup_authentication
    create_config
    update_systemd_service
    enable_service
    setup_firewall
    create_connection_scripts
    create_status_script
    test_connection
    
    log "WayVNC service enabled successfully!"
    echo ""
    echo "Service Information:"
    echo "==================="
    echo "Service: $SERVICE_NAME"
    echo "Status: $(systemctl is-active $SERVICE_NAME)"
    echo "Port: 5900"
    echo "Config: $CONFIG_DIR/config"
    echo ""
    echo "Connection Information:"
    echo "======================"
    echo "SSH Tunnel: $CONFIG_DIR/ssh_tunnel.sh"
    echo "Direct VNC: $CONFIG_DIR/connect_vnc.sh"
    echo "Service Management: $CONFIG_DIR/manage_service.sh"
    echo "Status Check: $CONFIG_DIR/status.sh"
    echo ""
    echo "Next steps:"
    echo "1. Test connection: $CONFIG_DIR/status.sh"
    echo "2. View logs: sudo journalctl -u wayvnc.service -f"
    echo "3. Restart service: $CONFIG_DIR/manage_service.sh restart"
    echo "4. Connect via SSH tunnel: $CONFIG_DIR/ssh_tunnel.sh"
    echo ""
    echo "For security enhancements, run:"
    echo "- tools/security/generate_tls.sh (TLS certificates)"
    echo "- tools/security/generate_rsa.sh (RSA-AES encryption)"
}

# Run main function
main "$@" 