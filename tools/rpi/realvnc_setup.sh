#!/bin/bash

# RealVNC Fallback Setup Script for Raspberry Pi
# Installs and configures RealVNC Server as fallback to WayVNC
# For use when Wayland compositor is not available or WayVNC fails

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
VNC_CONFIG_DIR="/etc/vnc"
VNC_USER_CONFIG="/home/pi/.vnc"
SERVICE_NAME="vncserver-x11-serviced"

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Check system requirements
check_system() {
    log "Checking system requirements..."
    
    # Check if running on Raspberry Pi
    if ! grep -q "Raspberry Pi" /proc/cpuinfo 2>/dev/null; then
        warning "This script is designed for Raspberry Pi. Continue anyway? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # Check available memory
    local mem_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    local mem_mb=$((mem_kb / 1024))
    
    if [ $mem_mb -lt 256 ]; then
        error "Insufficient memory: ${mem_mb}MB (minimum 256MB required)"
        exit 1
    fi
    
    log "System requirements check passed"
}

# Update system packages
update_system() {
    log "Updating system packages..."
    apt update
    apt upgrade -y
    log "System packages updated"
}

# Install RealVNC Server
install_realvnc() {
    log "Installing RealVNC Server..."
    
    # Add RealVNC repository
    if [ ! -f "/etc/apt/sources.list.d/realvnc.list" ]; then
        log "Adding RealVNC repository..."
        echo "deb https://www.realvnc.com/download/deb/ stable main" > /etc/apt/sources.list.d/realvnc.list
        wget -qO- https://www.realvnc.com/download/files/VNC-GPG-Key-RealVNC | apt-key add -
    fi
    
    # Update package list
    apt update
    
    # Install RealVNC Server
    apt install -y realvnc-vnc-server
    
    log "RealVNC Server installed"
}

# Configure RealVNC Server
configure_realvnc() {
    log "Configuring RealVNC Server..."
    
    # Create configuration directory
    mkdir -p "$VNC_CONFIG_DIR"
    
    # Enable VNC service
    systemctl enable "$SERVICE_NAME"
    
    # Start VNC service
    systemctl start "$SERVICE_NAME"
    
    # Wait for service to start
    sleep 3
    
    # Check service status
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        log "RealVNC service started successfully"
    else
        error "Failed to start RealVNC service"
        systemctl status "$SERVICE_NAME"
        exit 1
    fi
}

# Setup authentication
setup_authentication() {
    log "Setting up VNC authentication..."
    
    # Create user VNC directory
    mkdir -p "$VNC_USER_CONFIG"
    chown pi:pi "$VNC_USER_CONFIG"
    chmod 700 "$VNC_USER_CONFIG"
    
    # Set VNC password
    echo "Setting up VNC password..."
    echo "Enter password for VNC access:"
    read -s password
    echo ""
    echo "Confirm password:"
    read -s password_confirm
    echo ""
    
    if [ "$password" != "$password_confirm" ]; then
        error "Passwords do not match"
        exit 1
    fi
    
    # Set VNC password using vncpasswd
    echo "$password" | vncpasswd -f > "$VNC_USER_CONFIG/passwd"
    chown pi:pi "$VNC_USER_CONFIG/passwd"
    chmod 600 "$VNC_USER_CONFIG/passwd"
    
    log "VNC password configured"
}

# Configure VNC settings
configure_vnc_settings() {
    log "Configuring VNC settings..."
    
    # Create VNC configuration
    cat > "$VNC_USER_CONFIG/config" << EOF
# RealVNC Configuration
# Generated by realvnc_setup.sh

# Display settings
DesktopSize=1920x1080
ColorDepth=24

# Security settings
SecurityTypes=VncAuth
Authentication=VncAuth

# Performance settings
FrameRate=30
CompressionLevel=6

# Network settings
AllowLoopback=true
LoopbackOnly=false

# Logging
Log=*:stderr:100
EOF
    
    chown pi:pi "$VNC_USER_CONFIG/config"
    chmod 600 "$VNC_USER_CONFIG/config"
    
    log "VNC settings configured"
}

# Setup firewall
setup_firewall() {
    log "Setting up firewall rules..."
    
    # Allow VNC port
    ufw allow 5900/tcp comment "RealVNC"
    
    # Allow SSH (if not already allowed)
    ufw allow ssh
    
    # Enable firewall if not enabled
    if ! ufw status | grep -q "Status: active"; then
        log "Enabling firewall..."
        ufw --force enable
    fi
    
    log "Firewall rules configured"
}

# Create connection scripts
create_connection_scripts() {
    log "Creating connection scripts..."
    
    # SSH tunnel script for RealVNC
    cat > "$VNC_USER_CONFIG/realvnc_tunnel.sh" << 'EOF'
#!/bin/bash
# SSH tunnel for RealVNC access

PI_HOST="${1:-raspberrypi.local}"
PI_USER="${2:-pi}"
LOCAL_PORT="${3:-5900}"
REMOTE_PORT="${4:-5900}"

echo "Creating SSH tunnel to $PI_HOST for RealVNC..."
echo "Local port: $LOCAL_PORT"
echo "Remote port: $REMOTE_PORT"
echo ""
echo "Connect your VNC client to: localhost:$LOCAL_PORT"
echo "Press Ctrl+C to stop tunnel"

ssh -L "$LOCAL_PORT:localhost:$REMOTE_PORT" "$PI_USER@$PI_HOST"
EOF
    
    # RealVNC client connection script
    cat > "$VNC_USER_CONFIG/connect_realvnc.sh" << 'EOF'
#!/bin/bash
# Connect to RealVNC server

PI_HOST="${1:-raspberrypi.local}"
PI_USER="${2:-pi}"
PORT="${3:-5900}"

echo "Connecting to RealVNC server..."
echo "Host: $PI_HOST"
echo "Port: $PORT"
echo ""

# Try different VNC clients
if command -v realvnc-vnc-viewer &> /dev/null; then
    echo "Using RealVNC Viewer..."
    realvnc-vnc-viewer "$PI_HOST:$PORT"
elif command -v vinagre &> /dev/null; then
    echo "Using Vinagre VNC client..."
    vinagre "$PI_HOST:$PORT"
elif command -v vncviewer &> /dev/null; then
    echo "Using VNC Viewer..."
    vncviewer "$PI_HOST:$PORT"
elif command -v remmina &> /dev/null; then
    echo "Using Remmina..."
    remmina -c "vnc://$PI_HOST:$PORT"
else
    echo "No VNC client found. Install one of:"
    echo "- realvnc-vnc-viewer (recommended)"
    echo "- vinagre (GNOME)"
    echo "- tigervnc-viewer"
    echo "- remmina"
fi
EOF
    
    # Service management script
    cat > "$VNC_USER_CONFIG/manage_realvnc.sh" << 'EOF'
#!/bin/bash
# Manage RealVNC service

SERVICE_NAME="vncserver-x11-serviced"

case "$1" in
    "start")
        echo "Starting RealVNC service..."
        sudo systemctl start "$SERVICE_NAME"
        ;;
    "stop")
        echo "Stopping RealVNC service..."
        sudo systemctl stop "$SERVICE_NAME"
        ;;
    "restart")
        echo "Restarting RealVNC service..."
        sudo systemctl restart "$SERVICE_NAME"
        ;;
    "status")
        echo "RealVNC service status:"
        sudo systemctl status "$SERVICE_NAME"
        ;;
    "logs")
        echo "RealVNC service logs:"
        sudo journalctl -u "$SERVICE_NAME" -f
        ;;
    "enable")
        echo "Enabling RealVNC service..."
        sudo systemctl enable "$SERVICE_NAME"
        ;;
    "disable")
        echo "Disabling RealVNC service..."
        sudo systemctl disable "$SERVICE_NAME"
        ;;
    "config")
        echo "Opening RealVNC configuration..."
        sudo raspi-config nonint do_vnc 0
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|logs|enable|disable|config}"
        exit 1
        ;;
esac
EOF
    
    chmod +x "$VNC_USER_CONFIG"/*.sh
    chown pi:pi "$VNC_USER_CONFIG"/*.sh
    
    log "Connection scripts created"
}

# Create status script
create_status_script() {
    log "Creating status script..."
    
    cat > "$VNC_USER_CONFIG/realvnc_status.sh" << 'EOF'
#!/bin/bash
# RealVNC status and diagnostics

echo "RealVNC Status Report"
echo "===================="
echo ""

# Service status
echo "Service Status:"
if systemctl is-active --quiet vncserver-x11-serviced; then
    echo "✓ RealVNC service is running"
else
    echo "✗ RealVNC service is not running"
fi

# Port status
echo ""
echo "Port Status:"
if netstat -tlnp 2>/dev/null | grep -q ":5900 "; then
    echo "✓ Port 5900 is listening"
else
    echo "✗ Port 5900 is not listening"
fi

# Configuration
echo ""
echo "Configuration:"
CONFIG_FILE="$HOME/.vnc/config"
if [ -f "$CONFIG_FILE" ]; then
    echo "✓ Configuration file exists"
    echo "  Location: $CONFIG_FILE"
else
    echo "✗ Configuration file not found"
fi

# Authentication
echo ""
echo "Authentication:"
PASSWORD_FILE="$HOME/.vnc/passwd"
if [ -f "$PASSWORD_FILE" ]; then
    echo "✓ Password file exists"
else
    echo "✗ Password file not found"
fi

# Logs
echo ""
echo "Recent Logs:"
journalctl -u vncserver-x11-serviced --no-pager -n 10

# Network info
echo ""
echo "Network Information:"
echo "Hostname: $(hostname)"
echo "IP Address: $(hostname -I | awk '{print $1}')"
echo "VNC URL: vnc://$(hostname -I | awk '{print $1}'):5900"

# RealVNC specific info
echo ""
echo "RealVNC Information:"
if command -v vncserver &> /dev/null; then
    echo "✓ RealVNC Server installed"
    vncserver -version 2>/dev/null | head -1 || echo "Version info not available"
else
    echo "✗ RealVNC Server not found"
fi
EOF
    
    chmod +x "$VNC_USER_CONFIG/realvnc_status.sh"
    chown pi:pi "$VNC_USER_CONFIG/realvnc_status.sh"
    
    log "Status script created: $VNC_USER_CONFIG/realvnc_status.sh"
}

# Test connection
test_connection() {
    log "Testing RealVNC connection..."
    
    # Wait a moment for service to start
    sleep 3
    
    # Check if service is running
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        log "RealVNC service is running"
        
        # Check if port is listening
        if netstat -tlnp 2>/dev/null | grep -q ":5900 "; then
            log "RealVNC is listening on port 5900"
        else
            warning "RealVNC may not be listening on port 5900"
        fi
        
        # Show service status
        echo ""
        echo "Service Status:"
        echo "==============="
        systemctl status "$SERVICE_NAME" --no-pager -l
        echo ""
        
    else
        error "RealVNC service is not running"
        systemctl status "$SERVICE_NAME"
        exit 1
    fi
}

# Create fallback documentation
create_documentation() {
    log "Creating fallback documentation..."
    
    cat > "$VNC_USER_CONFIG/REALVNC_FALLBACK_README.md" << 'EOF'
# RealVNC Fallback Setup

This directory contains RealVNC Server configuration as a fallback to WayVNC.

## Files

- `passwd` - VNC password file
- `config` - VNC configuration
- `realvnc_tunnel.sh` - SSH tunnel script
- `connect_realvnc.sh` - VNC client connection script
- `manage_realvnc.sh` - Service management script
- `realvnc_status.sh` - Status and diagnostics script

## Usage

### Start RealVNC Service
```bash
sudo systemctl start vncserver-x11-serviced
sudo systemctl enable vncserver-x11-serviced
```

### Connect via SSH Tunnel
```bash
./realvnc_tunnel.sh raspberrypi.local
```

### Connect Directly
```bash
./connect_realvnc.sh raspberrypi.local
```

### Check Status
```bash
./realvnc_status.sh
```

## Configuration

### Change Password
```bash
vncpasswd
```

### Modify Settings
Edit `~/.vnc/config` and restart the service.

## Troubleshooting

### Service Not Starting
```bash
sudo systemctl status vncserver-x11-serviced
sudo journalctl -u vncserver-x11-serviced -f
```

### Port Already in Use
```bash
sudo netstat -tlnp | grep :5900
sudo lsof -i :5900
```

### Authentication Issues
```bash
rm ~/.vnc/passwd
vncpasswd
```

## Security Notes

- RealVNC uses VNC authentication (less secure than TLS)
- Always use SSH tunnel for remote access
- Change default password immediately
- Consider using RealVNC Viewer for better security

## Migration from WayVNC

If switching from WayVNC to RealVNC:

1. Stop WayVNC service:
   ```bash
   sudo systemctl stop wayvnc.service
   sudo systemctl disable wayvnc.service
   ```

2. Start RealVNC service:
   ```bash
   sudo systemctl start vncserver-x11-serviced
   sudo systemctl enable vncserver-x11-serviced
   ```

3. Update connection scripts to use RealVNC
EOF
    
    chmod 644 "$VNC_USER_CONFIG/REALVNC_FALLBACK_README.md"
    chown pi:pi "$VNC_USER_CONFIG/REALVNC_FALLBACK_README.md"
    
    log "Documentation created: $VNC_USER_CONFIG/REALVNC_FALLBACK_README.md"
}

# Main function
main() {
    log "Starting RealVNC fallback setup..."
    
    check_root
    check_system
    update_system
    install_realvnc
    configure_realvnc
    setup_authentication
    configure_vnc_settings
    setup_firewall
    create_connection_scripts
    create_status_script
    create_documentation
    test_connection
    
    log "RealVNC fallback setup completed successfully!"
    echo ""
    echo "Service Information:"
    echo "==================="
    echo "Service: $SERVICE_NAME"
    echo "Status: $(systemctl is-active $SERVICE_NAME)"
    echo "Port: 5900"
    echo "Config: $VNC_USER_CONFIG/config"
    echo ""
    echo "Connection Information:"
    echo "======================"
    echo "SSH Tunnel: $VNC_USER_CONFIG/realvnc_tunnel.sh"
    echo "Direct VNC: $VNC_USER_CONFIG/connect_realvnc.sh"
    echo "Service Management: $VNC_USER_CONFIG/manage_realvnc.sh"
    echo "Status Check: $VNC_USER_CONFIG/realvnc_status.sh"
    echo ""
    echo "Next steps:"
    echo "1. Test connection: $VNC_USER_CONFIG/realvnc_status.sh"
    echo "2. View logs: sudo journalctl -u vncserver-x11-serviced -f"
    echo "3. Restart service: $VNC_USER_CONFIG/manage_realvnc.sh restart"
    echo "4. Connect via SSH tunnel: $VNC_USER_CONFIG/realvnc_tunnel.sh"
    echo ""
    echo "Documentation: $VNC_USER_CONFIG/REALVNC_FALLBACK_README.md"
    echo ""
    echo "Note: RealVNC is now configured as fallback to WayVNC"
    echo "Use this when Wayland compositor is not available"
}

# Run main function
main "$@" 